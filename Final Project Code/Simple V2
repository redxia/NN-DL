{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Simple V2","provenance":[{"file_id":"1aBwvedDfc4pxwxur4LzRW8_z1oSZbjc6","timestamp":1583727443833}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"vLCeziWOvvJt","colab_type":"code","outputId":"e53d578a-3efe-43de-892c-b1199210086d","executionInfo":{"status":"ok","timestamp":1584144780286,"user_tz":420,"elapsed":2180,"user":{"displayName":"Redmond Xia","photoUrl":"","userId":"02497032323971739028"}},"colab":{"base_uri":"https://localhost:8080/","height":80}},"source":["import numpy as np\n","import pandas as pd\n","import datetime\n","import matplotlib.pyplot as plt\n","import math\n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.layers import LSTM\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.metrics import mean_squared_error\n","import time\n","np.random.seed(0)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["<p style=\"color: red;\">\n","The default version of TensorFlow in Colab will soon switch to TensorFlow 2.x.<br>\n","We recommend you <a href=\"https://www.tensorflow.org/guide/migrate\" target=\"_blank\">upgrade</a> now \n","or ensure your notebook will continue to use TensorFlow 1.x via the <code>%tensorflow_version 1.x</code> magic:\n","<a href=\"https://colab.research.google.com/notebooks/tensorflow_version.ipynb\" target=\"_blank\">more info</a>.</p>\n"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"JE2K-PoZwcep","colab_type":"code","colab":{}},"source":["def create_dataset(dataset, look_back = 1):\n","    dataX, dataY = [], []\n","    if(len(dataset) ==2):\n","        dataX.append(dataset[0])\n","        dataY.append(dataset[1,0])\n","        return np.array(dataX), np.array(dataY)\n","    #for i in range(len(dataset) - look_back - 1):\n","    for i in range(len(dataset) - look_back):\n","        a = dataset[i:(i + look_back), 0]\n","        dataX.append(a)\n","        dataY.append(dataset[i + look_back, 0])\n","    return np.array(dataX), np.array(dataY)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PhzdgeCewhIh","colab_type":"code","outputId":"6ae4f592-57c6-4196-fa5f-045bc1135b4c","executionInfo":{"status":"ok","timestamp":1584144800886,"user_tz":420,"elapsed":966,"user":{"displayName":"Redmond Xia","photoUrl":"","userId":"02497032323971739028"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["df = pd.read_csv(\"sp500.csv\")\n","df['caldt'] = pd.to_datetime(df['caldt'], format = '%Y%m%d')\n","df['caldt'] =  df['caldt'].dt.strftime('%Y-%m-%d')\n","data = df['spindx'].values\n","data = data.astype('float32')\n","data = np.reshape(data,(-1,1))\n","scaler = MinMaxScaler(feature_range=(0, 1))\n","data = scaler.fit_transform(data)\n","\n","df.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>caldt</th>\n","      <th>vwretd</th>\n","      <th>spindx</th>\n","      <th>sprtrn</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2009-06-01</td>\n","      <td>0.025957</td>\n","      <td>942.87</td>\n","      <td>0.025818</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2009-06-02</td>\n","      <td>0.001893</td>\n","      <td>944.74</td>\n","      <td>0.001983</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2009-06-03</td>\n","      <td>-0.013036</td>\n","      <td>931.76</td>\n","      <td>-0.013739</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2009-06-04</td>\n","      <td>0.011331</td>\n","      <td>942.46</td>\n","      <td>0.011484</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2009-06-05</td>\n","      <td>-0.002298</td>\n","      <td>940.09</td>\n","      <td>-0.002515</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        caldt    vwretd  spindx    sprtrn\n","0  2009-06-01  0.025957  942.87  0.025818\n","1  2009-06-02  0.001893  944.74  0.001983\n","2  2009-06-03 -0.013036  931.76 -0.013739\n","3  2009-06-04  0.011331  942.46  0.011484\n","4  2009-06-05 -0.002298  940.09 -0.002515"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"vS0sEzb-CHBx","colab_type":"code","outputId":"d984e02e-895f-412c-c856-af351fafaccb","executionInfo":{"status":"ok","timestamp":1584144806072,"user_tz":420,"elapsed":2380,"user":{"displayName":"Redmond Xia","photoUrl":"","userId":"02497032323971739028"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import tensorflow as tf\n","tf.test.gpu_device_name()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/device:GPU:0'"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"Tktgm_Xww0uh","colab_type":"code","outputId":"d0582ead-2dfd-4356-9d9a-361ee027ac18","executionInfo":{"status":"ok","timestamp":1584144838243,"user_tz":420,"elapsed":24043,"user":{"displayName":"Redmond Xia","photoUrl":"","userId":"02497032323971739028"}},"colab":{"base_uri":"https://localhost:8080/","height":819}},"source":["# params\n","num_hidden = 64\n","pred = []\n","look_back = 5\n","batch_size = 5\n","epochs = 2\n","\n","start = time.time()\n","model = Sequential()\n","model.add(LSTM(num_hidden, input_shape=(look_back, 1), return_sequences=True)) # Here, using more than one time-step\n","# extra layer\n","model.add(LSTM(num_hidden//2))\n","\n","model.add(Dense(1))\n","model.compile(loss='mean_squared_error', optimizer='adam')\n","model.summary()\n","\n","train_split = 0.67\n","train_size = int(len(data) * train_split)\n","train, test = data[:train_size, :], data[train_size:, :]\n","trainX, trainY = create_dataset(train, look_back)\n","testX, testY = create_dataset(test, look_back)\n","\n","trainX, testX = trainX.reshape((trainX.shape[0], trainX.shape[1], 1)), testX.reshape((testX.shape[0], testX.shape[1], 1))\n","print(trainX.shape, testX.shape)\n","model.fit(trainX, trainY, epochs=epochs, batch_size=batch_size, verbose=1)\n","\n","testPredict = model.predict(testX)\n","# invert predictions\n","testPredict = scaler.inverse_transform(testPredict)\n","pred.append(testPredict)\n","end = time.time()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:66: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4432: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n","Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","lstm_1 (LSTM)                (None, 5, 64)             16896     \n","_________________________________________________________________\n","lstm_2 (LSTM)                (None, 32)                12416     \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 1)                 33        \n","=================================================================\n","Total params: 29,345\n","Trainable params: 29,345\n","Non-trainable params: 0\n","_________________________________________________________________\n","(1781, 5, 1) (875, 5, 1)\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/math_grad.py:1424: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1033: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1020: The name tf.assign is deprecated. Please use tf.compat.v1.assign instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3005: The name tf.Session is deprecated. Please use tf.compat.v1.Session instead.\n","\n","Epoch 1/2\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:190: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:197: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:207: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:216: The name tf.is_variable_initialized is deprecated. Please use tf.compat.v1.is_variable_initialized instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:223: The name tf.variables_initializer is deprecated. Please use tf.compat.v1.variables_initializer instead.\n","\n","1781/1781 [==============================] - 15s 9ms/step - loss: 0.0042\n","Epoch 2/2\n","1781/1781 [==============================] - 7s 4ms/step - loss: 1.4126e-04\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mpXoXBktyS3N","colab_type":"code","outputId":"cff83e4a-3838-49b2-84a9-2b5f9d15e55e","executionInfo":{"status":"ok","timestamp":1584144931034,"user_tz":420,"elapsed":1003,"user":{"displayName":"Redmond Xia","photoUrl":"","userId":"02497032323971739028"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["predictions = np.reshape(pred, (-1, 1))\n","print(testY.shape)\n","testScore = math.sqrt(mean_squared_error(scaler.inverse_transform(testY.reshape((-1, 1))), predictions))\n","print('Test Score: %.2f RMSE' % (testScore))\n","print(end - start)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(875,)\n","Test Score: 36.54 RMSE\n","23.649508953094482\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hEYQICLZH_BE","colab_type":"code","outputId":"e7abc498-972e-429b-e0a8-9aeeff3650fd","executionInfo":{"status":"ok","timestamp":1584145063785,"user_tz":420,"elapsed":1329,"user":{"displayName":"Redmond Xia","photoUrl":"","userId":"02497032323971739028"}},"colab":{"base_uri":"https://localhost:8080/","height":312}},"source":["testPredictPlot = np.empty_like(data)\n","testPredictPlot[:, :] = np.nan\n","print(predictions.shape)\n","start_ind = train_size + look_back\n","testPredictPlot[start_ind : start_ind + len(predictions), :] = predictions\n","# plot baseline and predictions\n","plt.plot(scaler.inverse_transform(data)[2500:], label = 'SP 500')\n","plt.plot(testPredictPlot[2500:], label = 'Predicted SP 500')\n","plt.ylabel('S & P 500 Levels')\n","plt.xlabel('Time Index')\n","plt.title('S & P 500 over Time')\n","plt.legend()\n","#plt.show()\n","plt.savefig('sp500_plt_simplest2_last160.png')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(875, 1)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"OQ8Hvlr0IRqk","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8GU15KS6oIzJ","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}